You are given two integers num1 and num2.

In one operation, you can choose integer i in the range [0, 60] and subtract 2^i + num2 from num1.

Print the integer denoting the minimum number of operations needed to make num1 equal to 0.

If it is impossible to make num1 equal to 0, print -1.

Input Format

The first line will give T, the number of testcases.
Each testcase will give two number num1 and num2.
Constraints

1 <= num1 <= 10^9
-10^9 <= num2 <= 10^9
1 <= T <= 1000
Output Format

For each testcase, Print the integer denoting the minimum number of operations needed to make num1 equal to 0. If it is impossible to make num1 equal to 0, print -1.

Sample Input 0

1
3 -2
Sample Output 0

3
Explanation 0

We can make 3 equal to 0 with the following operations:

We choose i = 2 and substract 22 + (-2) from 3, 3 - (4 + (-2)) = 1.
We choose i = 2 and substract 22 + (-2) from 1, 1 - (4 + (-2)) = -1.
We choose i = 0 and substract 20 + (-2) from -1, (-1) - (1 + (-2)) = 0.
It can be proven, that 3 is the minimum number of operations that we need to perform.

Sample Input 1

1
5 7
Sample Output 1

-1
Explanation 1

It can be proven, that it is impossible to make 5 equal to 0 with the given operation.








#include <cmath>
#include <cstdio>
#include <vector>
#include <iostream>
#include <algorithm>
using namespace std;

int countBits(long long num) 
{ 
    int count = 0; 
    while(num>0) 
    { 
        count += num & 1; 
        num >>= 1; 
    } 
    return count; 
} 
int minOperation(int num1, int num2) 
{ 
    if(num1<num2) 
    { 
        return -1; 
    } 
    for(int i=0; i<= 40; i++) 
    { 
        long long diff = num1 - (num2) * 1LL*i; 
        int bits = countBits(diff); 
        if(bits<=i && i<=diff) 
        { 
            return i; 
        } 
    } 
    return -1; 
} 

int main() {
    int T;
    cin>>T;
    
    int j=0;
    while(j<T)
    {
        int num1 , num2;
        cin>>num1>>num2;
        
        int ans = minOperation(num1 , num2);
        cout<<ans<<endl;
        j++;
    }
    return 0;
}

