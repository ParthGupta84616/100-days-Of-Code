Given a circular integer array nums of length n, print the maximum possible sum of a non-empty subarray of nums.

A circular array means the end of the array connects to the beginning of the array. Formally, the next element of nums[i] is nums[(i + 1) % n] and the previous element of nums[i] is nums[(i - 1 + n) % n].

A subarray may only include each element of the fixed buffer nums at most once. Formally, for a subarray nums[i], nums[i + 1], ..., nums[j], there does not exist i <= k1, k2 <= j with k1 % n == k2 % n.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n, the number of testcases.
The second line of each testcase will give the array nums.
Constraints

1 <= T <= 1000
n == nums.length
1 <= n <= 3 * 10^4
-3 * 104 <= nums[i] <= 3 * 10^4
Output Format

For each testcase, print the maximum possible sum of a non-empty subarray of nums.

Sample Input 0

3
4
1 -2 3 -2
3
5 -3 5
3
-3 -2 -3
Sample Output 0

3
10
-2
Explanation 0

Subarray [3] has maximum sum 3.
Subarray [5,5] has maximum sum 5 + 5 = 10.
Subarray [-2] has maximum sum -2.










def maxCircularSubarraySum(nums):

    max_sum = float('-inf')

    min_sum = float('inf')

    total_sum = 0

    curr_max = 0

    curr_min = 0

    for num in nums:

        curr_max = max(curr_max + num, num)

        max_sum = max(max_sum, curr_max)

        

        curr_min = min(curr_min + num, num)

        min_sum = min(min_sum, curr_min)

        

        total_sum += num

    if max_sum < 0:

        return max_sum

    return max(max_sum, total_sum - min_sum)
T = int(input())

for _ in range(T):
    n = int(input())
    nums = list(map(int, input().split()))
    print(maxCircularSubarraySum(nums))


