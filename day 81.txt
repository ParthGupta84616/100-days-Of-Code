You are given an n x n binary grid board. In each move, you can swap any two rows with each other, or any two columns with each other.

Print the minimum number of moves to transform the board into a chessboard board. If the task is impossible, print -1.

A chessboard board is a board where no 0's and no 1's are 4-directionally adjacent.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n.
The next lines of each testcase will give the matrix i.e n x n binary grid board.
Constraints

n == board.length
n == board[i].length
2 <= n <= 30
board[i][j] is either 0 or 1.
1 <= T <= 1000
Output Format

For each testcase, print the minimum number of moves to transform the board into a chessboard board. If the task is impossible, print -1.

Sample Input 0

1
4
0 1 1 0
0 1 1 0
1 0 0 1
1 0 0 1
Sample Output 0

2
Explanation 0

Image

One potential sequence of moves is shown.
The first move swaps the first and second column.
The second move swaps the second and third row.
Sample Input 1

1
2
0 1
1 0
Sample Output 1

0
Explanation 1

Also note that the board with 0 in the top left corner, is also a valid chessboard.

Sample Input 2

1
2
1 0
1 0
Sample Output 2

-1
Explanation 2

No matter what sequence of moves you make, you cannot end with a valid chessboard.




#include <iostream>
#include <vector>
using namespace std;

int minMovesToChessboard(vector<vector<int>>& board) {
    int n = board.size();
    int rowSum = 0, colSum = 0;
    for (int i = 0; i < n; ++i) {
        rowSum += board[0][i];
        colSum += board[i][0];
    }

    if (n % 2 == 0) {
        if (rowSum != n / 2 && rowSum != n / 2 - 1)
            return -1;
        if (colSum != n / 2 && colSum != n / 2 - 1)
            return -1;
    } else {
        if (rowSum != n / 2 && rowSum != n / 2 + 1)
            return -1;
        if (colSum != n / 2 && colSum != n / 2 + 1)
            return -1;
    }

    for (int i = 0; i < n; ++i) {
        for (int j = 0; j < n; ++j) {
            if ((board[0][0] ^ board[i][0] ^ board[0][j] ^ board[i][j]) == 1)
                return -1;
        }
    }

    int rowSwap = 0, colSwap = 0;
    for (int i = 0; i < n; ++i) {
        rowSwap += board[i][0] != i % 2;
        colSwap += board[0][i] != i % 2;
    }

    return min(rowSwap, n - rowSwap) / 2 + min(colSwap, n - colSwap) / 2;
}

int main() {
    int T;
    cin >> T;

    vector<int> results;

    for (int t = 0; t < T; ++t) {
        int n;
        cin >> n;

        vector<vector<int>> board(n, vector<int>(n));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> board[i][j];
            }
        }

        results.push_back(minMovesToChessboard(board));
    }

    for (int result : results) {
        cout << result << endl;
    }

    return 0;
}

