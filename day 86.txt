You are given the customer visit log of a shop represented by a 0-indexed string customers consisting only of characters 'N' and 'Y':

if the ith character is 'Y', it means that customers come at the ith hour whereas 'N' indicates that no customers come at the ith hour. If the shop closes at the jth hour (0 <= j <= n), the penalty is calculated as follows:

For every hour when the shop is open and no customers come, the penalty increases by 1. For every hour when the shop is closed and customers come, the penalty increases by 1. Print the earliest hour at which the shop must be closed to incur a minimum penalty.

Note that if a shop closes at the jth hour, it means the shop is closed at the hour j.

Input Format

The first line will give T, the number of testcases.
Each testcase will give string customers.
Constraints

1 <= T <= 1000
1 <= customers.length <= 10^5
customers consists only of characters 'Y' and 'N'.
Output Format

For each testcase, print the earliest hour at which the shop must be closed to incur a minimum penalty.

Sample Input 0

1
YYNY
Sample Output 0

2
Explanation 0

Closing the shop at the 0th hour incurs in 1+1+0+1 = 3 penalty.
Closing the shop at the 1st hour incurs in 0+1+0+1 = 2 penalty.
Closing the shop at the 2nd hour incurs in 0+0+0+1 = 1 penalty.
Closing the shop at the 3rd hour incurs in 0+0+1+1 = 2 penalty.
Closing the shop at the 4th hour incurs in 0+0+1+0 = 1 penalty.
Closing the shop at 2nd or 4th hour gives a minimum penalty. Since 2 is earlier, the optimal closing time is 2.

Sample Input 1

1
NNNNN
Sample Output 1

0
Explanation 1

It is best to close the shop at the 0th hour as no customers arrive.

Sample Input 2

1
YYYY
Sample Output 2

4
Explanation 2

It is best to close the shop at the 4th hour as customers arrive at each hour.





#include <stdio.h>
int earliest_closing_hour(char *customers) {
    int n = 0;
    while (customers[n] != '\0') {
        n++;
    }
    int penalty = 0;
    for (int i = 0; i < n - 1; i++) {
        if (customers[i] == 'N') {
            penalty++;
        }
        if (customers[i] == 'Y') {
            penalty--;
        }
    }
    int min_penalty = penalty;
    int closing_hour = 0;

    for (int i = 1; i <= n; i++) {
        if (customers[i - 1] == 'N') {
            penalty++;
        }
        if (customers[i - 1] == 'Y') {
            penalty--;
        }
        if (customers[i - 1] == 'Y' && customers[i - 1] == 'N') {
            penalty++;
        }
        if (penalty < min_penalty) {
            min_penalty = penalty;
            closing_hour = i;
        }
    }

    return closing_hour;
}

int main() {
    int T;
    scanf("%d", &T);
    for (int t = 0; t < T; t++) {
        char customers[100001];
        scanf("%s", customers);
        int result = earliest_closing_hour(customers);
        printf("%d\n", result);
    }

    return 0;
}

