You are climbing a staircase. It takes n steps to reach the top.

Each time you can either climb 1, 2 or 3 steps. In how many distinct ways can you climb to the top?

Input Format

The first line will be T, number of testcases.
Each testcase will give n.
Constraints

0 <= n <= 32
The answer is guaranteed to fit within a 32-bit integer, ie. answer <= 2^31 - 1.
Output Format

For each testcase, print the number of distinct ways you can climb to the top.

Sample Input 0

1
4
Sample Output 0

7
Explanation 0

these are the 7 ways

1 step + 1 step + 1 step + 1 step
1 step + 3 step
1 step + 2 step + 1 step
1 step + 1 step + 2 step
2 step + 2 step
2 step + 1 step + 1 step
3 step + 1 step






#include <stdio.h>

int countDistinctWays(int n) {

    if (n == 0 || n == 1) {

        return 1;

    }

    else if (n == 2) {

        return 2;

    }

    else {

        int dp[n+1];

        dp[0] = 1;

        dp[1] = 1;

        dp[2] = 2;

        for (int i = 3; i <= n; i++) {

            dp[i] = dp[i-1] + dp[i-2] + dp[i-3];

        }

        return dp[n];

    }

}

int main() {

    int t;

    scanf("%d", &t);

    while (t--) {

        int n;

        scanf("%d", &n);

        int ways = countDistinctWays(n);

        printf("%d\n", ways);

    }

    return 0;

}
