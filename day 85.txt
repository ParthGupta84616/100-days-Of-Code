There is a forest with an unknown number of rabbits. We asked n rabbits "How many rabbits have the same color as you?" and collected the answers in an integer array answers where answers[i] is the answer of the ith rabbit.

Given the array answers, print the minimum number of rabbits that could be in the forest.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n.
The second line of each testcase will give the answers array.
Constraints

1 <= answers.length <= 1000
0 <= answers[i] < 1000
1 <= T <= 1000
Output Format

For each testcase, print the minimum number of rabbits that could be in the forest.

Sample Input 0

1
3
1 1 2
Sample Output 0

5
Explanation 0

The two rabbits that answered "1" could both be the same color, say red.
The rabbit that answered "2" can't be red or the answers would be inconsistent.
Say the rabbit that answered "2" was blue.
Then there should be 2 other blue rabbits in the forest that didn't answer into the array.
The smallest possible number of rabbits in the forest is therefore 5: 3 that answered plus 2 that didn't.
Sample Input 1

1
3
10 10 10
Sample Output 1

11



#include <iostream>
#include <vector>
#include <unordered_map>

int minRabbits(int n, const std::vector<int>& answers) {
    std::unordered_map<int, int> colorCount;

    for (int answer : answers) {
        colorCount[answer]++;
    }

    int totalRabbits = 0;

    for (const auto& entry : colorCount) {
        int color = entry.first;
        int count = entry.second;

        int groups = count / (color + 1);
        int remainder = count % (color + 1);

        totalRabbits += (groups + (remainder > 0 ? 1 : 0)) * (color + 1);
    }

    return totalRabbits;
}

int main() {
    int t;
    std::cin >> t; 

    for (int i = 0; i < t; i++) {
        int n;
        std::cin >> n;  

        std::vector<int> answers(n);
        for (int j = 0; j < n; j++) {
            std::cin >> answers[j];
        }

        int result = minRabbits(n, answers);
        std::cout << result << std::endl;
    }

    return 0;
}