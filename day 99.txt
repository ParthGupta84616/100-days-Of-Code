You are given an integer array prices where prices[i] is the price of a given stock on the ith day.

On each day, you may decide to buy and/or sell the stock. You can only hold at most one share of the stock at any time. However, you can buy it then immediately sell it on the same day.

Find and print the maximum profit you can achieve.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n, the size of prices array.
The second line of each testcase will give the array prices where prices[i] is the price of a given stock on the ith day.
Constraints

1 <= T <= 1000
1 <= prices.length <= 3 * 10^4
0 <= prices[i] <= 10^4
Output Format

For each testcase, Find and print the maximum profit you can achieve.

Sample Input 0

1
6
7 1 5 3 6 4
Sample Output 0

7
Explanation 0

Buy on day 2 (price = 1) and sell on day 3 (price = 5), profit = 5-1 = 4. Then buy on day 4 (price = 3) and sell on day 5 (price = 6), profit = 6-3 = 3. Total profit is 4 + 3 = 7.

Sample Input 1

1
5
1 2 3 4 5
Sample Output 1

4
Explanation 1

Buy on day 1 (price = 1) and sell on day 5 (price = 5), profit = 5-1 = 4. Total profit is 4.

Sample Input 2

1
5
7 6 4 3 1
Sample Output 2

0
Explanation 2

There is no way to make a positive profit, so we never buy the stock to achieve the maximum profit of 0.

#include <stdio.h>

int maxProfit(int* prices, int n) {
    int profit = 0;
    for (int i = 1; i < n; i++) {
        if (prices[i] > prices[i - 1]) {
            profit += prices[i] - prices[i - 1];
        }
    }
    return profit;
}

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        int n;
        scanf("%d", &n);

        int prices[n];
        for (int i = 0; i < n; i++) {
            scanf("%d", &prices[i]);
        }

        int result = maxProfit(prices, n);
        printf("%d\n", result);
    }

    return 0;
}

