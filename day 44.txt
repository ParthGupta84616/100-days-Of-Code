Given a string s, partition s such that every substring of the partition is a palindrome . Print the number of all possible palindrome partitioning of s.

Input Format

The first line will give T, the number of testcases.
Each testcase will give the string s.
Constraints

1<=T<=1000
1 <= s.length <= 16
s contains only lowercase English letters.
Output Format

For each testcase print the number of all possible palindrome partitioning of s.

Sample Input 0

1
aab
Sample Output 0

2
Explanation 0

these are two possible partitions

"a","a","b"
"aa","b"






#include <stdio.h>
#include <string.h>

int isPalindrome(char str[], int start, int end) {
    while (start < end) {
        if (str[start++] != str[end--]) {
            return 0; 
        }
    }
    return 1; 
}

void countPalindromePartitions(char str[], int start, int len, int *count) {
    if (start >= len) {
        (*count)++;
        return;
    }

    for (int i = start; i < len; i++) {
        if (isPalindrome(str, start, i)) {
            countPalindromePartitions(str, i + 1, len, count);
        }
    }
}

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        char s[17]; 
        scanf("%s", s);

        int count = 0;
        int length = strlen(s);
        countPalindromePartitions(s, 0, length, &count);

        printf("%d\n", count);
    }

    return 0;
}

