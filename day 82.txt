You are given an integer array nums. In one move, you can pick an index i where 0 <= i < nums.length and increment nums[i] by 1.

Print the minimum number of moves to make every value in nums unique.

The test cases are generated so that the answer fits in a 32-bit integer.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n, the number of elements in array nums.
The second line of each testcase will give the array nums of n elements.
Constraints

1 <= T <= 1000
1 <= nums.length <= 10^5
0 <= nums[i] <= 10^5
Output Format

For each testcase, print the minimum number of moves to make every value in nums unique.

Sample Input 0

1
3
1 2 2
Sample Output 0

1
Explanation 0

After 1 move, the array could be [1, 2, 3].

Sample Input 1

1
6
3 2 1 2 1 7
Sample Output 1

6
Explanation 1

After 6 moves, the array could be [3, 4, 1, 2, 5, 7]. It can be shown with 5 or less moves that it is impossible for the array to have all unique values.

#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int minMovesToMakeUnique(vector<int>& nums) {
    int moves = 0;
    sort(nums.begin(), nums.end());
    
    for (int i = 1; i < nums.size(); ++i) {
        if (nums[i] <= nums[i - 1]) {
            moves += nums[i - 1] - nums[i] + 1;
            nums[i] = nums[i - 1] + 1;
        }
    }
    
    return moves;
}

int main() {
    int T;
    cin >> T;

    while (T--) {
        int n;
        cin >> n;

        vector<int> nums(n);
        for (int i = 0; i < n; ++i) {
            cin >> nums[i];
        }

        int result = minMovesToMakeUnique(nums);
        cout << result << endl;
    }

    return 0;
}
 







