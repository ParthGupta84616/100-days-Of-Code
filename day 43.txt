You are an adventurer who enters a dungeon full of gold and monsters. The dungeon is a m x n grid, where each cell contains a number of gold coins or a monster (represented by 0). You want to collect as much gold as possible before leaving the dungeon.

How can you do that, given the following rules:

You start from any cell that has gold coins, and you can end at any cell that has gold coins.
You can move one step up, down, left, or right from your current cell, as long as you don’t go outside the grid or enter a cell that you have already visited.
You can’t enter a cell that has a monster.
You collect all the gold coins in the cell that you enter.
Input Format

The first line will give T, the number of testcases.
The fisrt line of each testcase will give m and n.
The next few lines will give the grid.
Constraints

m == grid.length
n == grid[i].length
1 <= m, n <= 15
0 <= grid[i][j] <= 100
There are at most 25 cells containing gold.
Output Format

For each testcase, print the maximum amount of gold you can take from the dungeon.
Sample Input 0

1
3 3
0 6 0
5 8 7
0 9 0
Sample Output 0

24
Explanation 0

Path to get the maximum gold, 9 -> 8 -> 7.

Sample Input 1

1
5 3
1 0 7
2 0 6
3 4 5
0 3 0
9 0 20
Sample Output 1

28
Explanation 1

Path to get the maximum gold, 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7.




#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int getMaxGold(vector<vector<int>>& dungeon, int row, int col) {
    if (row < 0 || row >= dungeon.size() || col < 0 || col >= dungeon[0].size() || dungeon[row][col] == 0) {
        return 0;
    }

    int currentGold = dungeon[row][col];
    dungeon[row][col] = 0; // Mark the cell as visited

    int up = getMaxGold(dungeon, row - 1, col);
    int down = getMaxGold(dungeon, row + 1, col);
    int left = getMaxGold(dungeon, row, col - 1);
    int right = getMaxGold(dungeon, row, col + 1);

    dungeon[row][col] = currentGold; // Backtrack

    return currentGold + max({up, down, left, right});
}

int main() {
    int T;
    cin >> T;

    for (int t = 0; t < T; ++t) {
        int m, n;
        cin >> m >> n;

        vector<vector<int>> dungeon(m, vector<int>(n, 0));

        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                cin >> dungeon[i][j];
            }
        }

        int maxGold = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (dungeon[i][j] != 0) {
                    maxGold = max(maxGold, getMaxGold(dungeon, i, j));
                }
            }
        }

        cout << maxGold << endl;
    }

    return 0;
}






