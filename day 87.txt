You are given two integers, n and k.

An array of distinct positive integers is called a k-avoiding array if there does not exist any pair of distinct elements that sum to k.

Print the minimum possible sum of a k-avoiding array of length n.

Input Format

The first line will give T, the number of testcases.
Each testcase will give 2 integers n and k.
Constraints

1 <= T <= 1000
1 <= n, k <= 50
Output Format

For each testcase, print the minimum possible sum of a k-avoiding array of length n.

Sample Input 0

1
5 4
Sample Output 0

18
Explanation 0

Consider the k-avoiding array [1,2,4,5,6], which has a sum of 18. It can be proven that there is no k-avoiding array with a sum less than 18.

Sample Input 1

1
2 6
Sample Output 1

3
Explanation 1

We can construct the array [1,2], which has a sum of 3. It can be proven that there is no k-avoiding array with a sum less than 3.



#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int minimumSum(int n, int k) {
        int sum = 0, num = 1;
        for(int i = 0; i < n; i++){
            if(num >= k){
                sum += num++;
            }
            else if(k - num < num){
                num++, i--;
            }
            else{
                sum += num++;
            }
        }
        return sum;
    }
};
int main(){
    int t;
    cin>>t;
    Solution s=Solution();
    vector<int> ans;
    while(t--){
        int n,k;
        cin>>n>>k;
        ans.push_back(s.minimumSum(n,k));
    }
    for(auto it:ans){
        cout<<it<<endl;
    }
    return 0;
}