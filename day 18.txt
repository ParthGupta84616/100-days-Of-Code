In the midst of the Cricket World Cup excitement, a unique ticketing system has been introduced. Each cricket match offers different ticket prices, and the challenge is to create packages of k distinct ticket types. The thrill of attending the match is determined by the smallest absolute difference in prices between any two selected ticket types. You are given an array of integer prices where price [i] denotes the price of the ith type of match ticket and an integer k, which represents the number of distinct ticket types in a package. The enjoyment value of a ticket package is the smallest absolute difference of the prices of any two tickets in the package. In the Cricket World Cup Ticket Pricing challenge, the goal is to find the maximum enjoyment value of a ticket package by selecting k distinct ticket types.

Input Format

The first line will be T, the number of testcases.
The first line of each testcase will give N the size of the array and a positive integer k which is the number of distinct tickets in the package.
The second line of each testcase will give array arr where arr[i] denotes the price of the ith ticket.
Constraints

1<=T<=100

1 <= N <= 1000

1 <= k <= N

0 <= arr[i] <= 1000000

Output Format

For each testcase output the maximum enjoyment value of a ticket package

Sample Input 0

1
6 3
13 5 1 8 21 2
Sample Output 0

8
Explanation 0

Choose the tickets with the prices [13,5,21]. The enjoyment value of the ticket package is: min(|13 - 5|, |13 - 21|, |5 - 21|) = min(8, 8, 16) = 8. It can be proven that 8 is the maximum enjoyment value that can be achieved.

Sample Input 1

1
3 2
1 3 1
Sample Output 1

2
Sample Input 2

1
4 2
7 7 7 7
Sample Output 2

0

def count_pairs(prices, diff):
    count = 0
    left = 0
    for right in range(len(prices)):
        while prices[right] - prices[left] > diff:
            left += 1
        count += right - left
    return count

def max_enjoyment_value(N, k, prices):
    prices.sort()
    left = 0
    right = prices[-1] - prices[0]

    while left < right:
        mid = (left + right + 1) // 2
        count = 0
        prev = prices[0]

        for i in range(1, N):
            if prices[i] - prev >= mid:
                prev = prices[i]
                count += 1

        if count >= k - 1:
            left = mid
        else:
            right = mid - 1

    return left

def main():
    T = int(input())  

    for _ in range(T):
        N, k = map(int, input().split())  
        prices = list(map(int, input().split())) 

        result = max_enjoyment_value(N, k, prices)
        print(result)

if __name__ == "__main__":
    main()

