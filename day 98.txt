There is a robot on an m x n grid. The robot is initially located at the top-left corner (i.e., grid[0][0]). The robot tries to move to the bottom-right corner (i.e., grid[m - 1][n - 1]). The robot can only move either down or right at any point in time.

Given the two integers m and n, print the number of possible unique paths that the robot can take to reach the bottom-right corner.

The test cases are generated so that the answer will be less than or equal to 2 * 10^9.

Input Format

The first line will give T, the number of testcases.
Each testcase will give m and n.
Constraints

1 <= T <= 1000
1 <= m,n <= 100
Output Format

For each testcase, print the number of possible unique paths that the robot can take to reach the bottom-right corner.

Sample Input 0

1
3 7
Sample Output 0

28
Sample Input 1

1
3 2
Sample Output 1

3
Explanation 1

From the top-left corner, there are a total of 3 ways to reach the bottom-right corner:

Right -> Down -> Down
Down -> Down -> Right
Down -> Right -> Down



#include <iostream>
#include <vector>
using namespace std;

int uniquePaths(int m, int n) {
    vector<vector<int>> paths(m, vector<int>(n, 0));
    for (int i = 0; i < m; ++i)
        paths[i][0] = 1;
    for (int j = 0; j < n; ++j)
        paths[0][j] = 1;
    for (int i = 1; i < m; ++i) {
        for (int j = 1; j < n; ++j) {
            paths[i][j] = paths[i - 1][j] + paths[i][j - 1];
        }
    }
    return paths[m - 1][n - 1];
}

int main() {
    int T;
    cin >> T;
    for (int t = 0; t < T; ++t) {
        int m, n;
        cin >> m >> n;
        cout << uniquePaths(m, n) << endl;
    }

    return 0;
}

