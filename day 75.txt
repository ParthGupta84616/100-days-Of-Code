You are given an array nums of n elements. Construct a binary search tree from the given array (just like previous days questions) then print the level with maximum sum.

The level of its root is 1, the level of its children is 2, and so on.

Print the smallest level x such that the sum of all the values of nodes at level x is maximal.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n, the size of array nums.
The second line of each testcase will give the array nums.
Constraints

1 <= T <= 1000
1 <= n <= 100
-10^3 <= nums[i] <= 10^3
Output Format

For each testcase, print the smallest level x such that the sum of all the values of nodes at level x is maximal.

Sample Input 0

1
5
1 0 7 7 -8
Sample Output 0

2
Explanation 0

Level 1 sum = 1.
Level 2 sum = 7 + 0 = 7.
Level 3 sum = 7 + -8 = -1.
So we print the level with the maximum sum which is level 2.





#include <bits/stdc++.h>
using namespace std;

struct Node {
  int data; 
  Node* left; 
  Node* right; 
  Node(int value) {
    data = value;
    left = NULL;
    right = NULL;
  }
};
Node* insert(Node* root, int value) {
  if (root == NULL) {
    return new Node(value);
  }
  if (value <= root->data) {
    root->left = insert(root->left, value);
  }
  else if (value > root->data) {
    root->right = insert(root->right, value);
  }
  return root;
}
int findMaxSumLevel(Node* root) {
  if (!root) {
    return 0;
  }

  queue<Node*> q;
  q.push(root);
  int maxLevel = 0;
  int maxSum = INT_MIN;
  int level = 0;

  while (!q.empty()) {
    level++;
    int size = q.size();
    int currentSum = 0;

    for (int i = 0; i < size; i++) {
      Node* current = q.front();
      q.pop();
      currentSum += current->data;

      if (current->left) {
        q.push(current->left);
      }

      if (current->right) {
        q.push(current->right);
      }
    }

    if (currentSum > maxSum) {
      maxSum = currentSum;
      maxLevel = level;
    }
  }

  return maxLevel;
}
int main() {
  int t;
  cin >> t;
  vector<int> ans;
  while (t--) {
    Node* root = NULL;
    int n;
    cin >> n;
    vector<int> aux(n);
    for (int i = 0; i < n; i++) {
      cin >> aux[i];
    }
    for (int i = 0; i < n; i++) {
      root = insert(root, aux[i]);
    }
    ans.push_back(findMaxSumLevel(root));
  }
  for (auto it : ans) {
    cout << it << endl;
  }
  return 0;
}

