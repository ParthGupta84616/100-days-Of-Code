You are given a string s consisting only of uppercase English letters.

You can apply some operations to this string where, in one operation, you can remove any occurrence of one of the substrings "AB" or "CD" from s.

Print the minimum possible length of the resulting string that you can obtain.

Note that the string concatenates after removing the substring and could produce new "AB" or "CD" substrings.

Input Format

The first line will give T, the number of testcase.
Each testcase will give the string s.
Constraints

1 <= s.length <= 100
s consists only of uppercase English letters.
1 <= T <= 1000
Output Format

For each testcase, print the minimum possible length of the resulting string that you can obtain.

Sample Input 0

1
ABFCACDB
Sample Output 0

2
Explanation 0

We can do the following operations:

Remove the substring "ABFCACDB", so s = "FCACDB".
Remove the substring "FCACDB", so s = "FCAB".
Remove the substring "FCAB", so s = "FC".
So the resulting length of the string is 2. It can be shown that it is the minimum length that we can obtain.

Sample Input 1

1
ACBBD
Sample Output 1

5
Explanation 1

We cannot do any operations on the string so the length remains the same.



def min_length_after_removal(s):
    stack = []
    for char in s:
        if len(stack) >= 1 and (stack[-1] == 'A' and char == 'B' or stack[-1] == 'C' and char == 'D'):
            stack.pop()
        else:
            stack.append(char)
    return len(stack)

T = int(input())
for _ in range(T):
    s = input()
    result = min_length_after_removal(s)
    print(result)
