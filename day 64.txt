Given an array of n integers nums, a 132 pattern is a subsequence of three integers nums[i], nums[j] and nums[k] such that i < j < k and nums[i] < nums[k] < nums[j].

Print "Yes" if there is a 132 pattern in nums, otherwise, print "No".

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give nums length.
The second line of each testcase will give array nums.
Constraints

1 <= T <= 1000
n == nums.length
1 <= n <= 2 * 10^5
-10^9 <= nums[i] <= 10^9
Output Format

For each testcase, print "Yes" if there is a 132 pattern in nums, otherwise, print "No".

Sample Input 0

1
4
1 2 3 4
Sample Output 0

No
Explanation 0

There is no 132 pattern in the sequence.

Sample Input 1

1
4
3 1 4 2
Sample Output 1

Yes
Explanation 1

There is a 132 pattern in the sequence: [1, 4, 2].

Sample Input 2

1
4
-1 3 2 0
Sample Output 2

Yes
Explanation 2

There are three 132 patterns in the sequence: [-1, 3, 2], [-1, 3, 0] and [-1, 2, 0].












def find_132_pattern(nums):
    n = len(nums)
    min_i = float('inf')

    for j in range(n):
        min_i = min(min_i, nums[j])

        if min_i == nums[j]:
            continue

        for k in range(n - 1, j, -1):
            if min_i < nums[k] < nums[j]:
                return True

    return False

def main():
    T = int(input())
    for _ in range(T):
        n = int(input())
        nums = list(map(int, input().split()))

        result = find_132_pattern(nums)
        if result:
            print("Yes")
        else:
            print("No")

if __name__ == "__main__":
    main()
