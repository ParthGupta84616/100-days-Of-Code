Imagine you are a detective who has a list of clues called nums and a number called k. Each clue is a number, and some of them are odd and some are even. A sequence of clues is a part of the list that is continuous, meaning there are no gaps between the clues. A sequence of clues is called nice if it has k odd clues in it.

How many nice sequences of clues are there in nums?

Input Format

The first line will give T, the number of testcase.
The first line of each testcase will give n and k.
The second line of each testcase will be the array nums.
Constraints

1<=T<=1000
1<=K<=N<=50,000
1 <= nums[i] <= 100,000
Output Format

For each testcase print the number of nice sequences of clues in nums.

Sample Input 0

1
5 3
1 1 2 1 1
Sample Output 0

2
Explanation 0

The only sub-arrays with 3 odd numbers are [1,1,2,1] and [1,2,1,1].

Sample Input 1

1
3 1
2 4 6
Sample Output 1

0
Explanation 1

There is no odd numbers in the array.

Sample Input 2

1
10 2
2 2 2 1 2 2 1 2 2 2
Sample Output 2

16






def count_nice_sequences(nums, k):
    n = len(nums)
    odd_count = 0
    nice_sequences = 0
    prefix_sum = [0] * (n + 1)

    for i in range(1, n + 1):
        prefix_sum[i] = prefix_sum[i - 1] + (nums[i - 1] % 2 == 1)

    for end in range(1, n + 1):
        start = 1
        while start <= end:
            if prefix_sum[end] - prefix_sum[start - 1] == k:
                nice_sequences += 1
            start += 1

    return nice_sequences

def main():
    T = int(input())

    for _ in range(T):
        n, k = map(int, input().split())
        nums = list(map(int, input().split()))

        result = count_nice_sequences(nums, k)
        print(result)

if __name__ == "__main__":
    main()


