There is a bi-directional graph with n vertices, where each vertex is labeled from 0 to n - 1 (inclusive). The edges in the graph are represented as a 2D integer array edges, where each edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi. No vertex has an edge to itself and there can be multiple edges between two vertices.

You want to determine if there is a valid path that exists from vertex source to vertex destination.

Given edges and the integers n, source, and destination, Print "Yes" if there is a valid path from source to destination, or "No" otherwise.

Input Format

The first line will give n
The next n lines will give 2D array edges where edges[i] = [ui, vi] denotes a bi-directional edge between vertex ui and vertex vi.
The last line will give source and destination respectively.
Constraints

1 <= n <= 2 * 10^5
0 <= edges.length <= 2 * 10^5
edges[i].length == 2
0 <= ui, vi <= n - 1
ui != vi
0 <= source, destination <= n - 1
There are no self edges.
Output Format

Print "Yes" if there is a valid path from source to destination, or "No" otherwise.

Sample Input 0

3
0 1
1 2
2 0
0 2
Sample Output 0

Yes
Explanation 0

There are two paths from vertex 0 to vertex 2:

0 → 1 → 2
0 → 2






def has_valid_path(n, edges, source, destination):
    graph = {i: [] for i in range(n)}
    for edge in edges:
        graph[edge[0]].append(edge[1])
        graph[edge[1]].append(edge[0])
    def dfs(node, visited):
        if node == destination:
            return True
        visited[node] = True
        for neighbor in graph[node]:
            if not visited[neighbor]:
                if dfs(neighbor, visited):
                    return True
        return False
    visited = [False] * n
    result = dfs(source, visited)
    if result:
        print("Yes")
    else:
        print("No")

n = int(input())
edges = [list(map(int, input().split())) for _ in range(n)]
source, destination = map(int, input().split())

has_valid_path(n, edges, source, destination)