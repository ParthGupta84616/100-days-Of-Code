You are given an array of n points representing integer coordinates of some points on a 2D-plane, where points[i] = [xi, yi].

The cost of connecting two points [xi, yi] and [xj, yj] is the manhattan distance between them: |xi - xj| + |yi - yj|, where |val| denotes the absolute value of val.

Print the minimum cost to make all points connected. All points are connected if there is exactly one simple path between any two points.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give n, the number of points.
The next lines of each testcase will give a 2D array points of n points where points[i] = [xi, yi].
Constraints

1 <= T <= 1000
n == points.length
1 <= points.length <= 1000
-10^6 <= xi, yi <= 10^6
All pairs (xi, yi) may or maynot be distinct.
Output Format

For each testcase, print the minimum cost to make all points connected.

Sample Input 0

1
5
0 0 
2 2
3 10
5 2 
7 0
Sample Output 0

20
Explanation 0

click here (image)

We can connect the points as shown above to get the minimum cost of 20. Notice that there is a unique path between every pair of points.

Sample Input 1

1
3
3 12
-2 5
-4 1
Sample Output 1

18


#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include <limits.h>

#define MAX_POINTS 1000

typedef struct {
    int x, y;
} Point;

int manhattanDistance(Point p1, Point p2) {
    return abs(p1.x - p2.x) + abs(p1.y - p2.y);
}

int minimumCostToConnectPoints(Point points[MAX_POINTS], int n) {
    bool visited[MAX_POINTS] = {false};
    int heap[MAX_POINTS][2]; 
    int heapSize = 0;
    int totalCost = 0;

    heap[heapSize][0] = 0;
    heap[heapSize][1] = 0;
    heapSize++;

    while (heapSize > 0) {
        int cost = heap[0][0];
        int node = heap[0][1];
        heapSize--;
        heap[0][0] = heap[heapSize][0];
        heap[0][1] = heap[heapSize][1];

        int i = 0;
        while (2 * i + 1 < heapSize) {
            int child = 2 * i + 1;
            if (child + 1 < heapSize && heap[child + 1][0] < heap[child][0]) {
                child++;
            }

            if (heap[child][0] < heap[i][0]) {
                int tempCost = heap[i][0];
                int tempNode = heap[i][1];
                heap[i][0] = heap[child][0];
                heap[i][1] = heap[child][1];
                heap[child][0] = tempCost;
                heap[child][1] = tempNode;
                i = child;
            } else {
                break;
            }
        }

        if (visited[node]) {
            continue;
        }

        visited[node] = true;
        totalCost += cost;

        for (int i = 0; i < n; i++) {
            if (!visited[i]) {
                int distance = manhattanDistance(points[node], points[i]);
                heap[heapSize][0] = distance;
                heap[heapSize][1] = i;
                heapSize++;
                int j = heapSize - 1;
                while (j > 0) {
                    int parent = (j - 1) / 2;
                    if (heap[j][0] < heap[parent][0]) {
                        // Swap with the parent
                        int tempCost = heap[j][0];
                        int tempNode = heap[j][1];
                        heap[j][0] = heap[parent][0];
                        heap[j][1] = heap[parent][1];
                        heap[parent][0] = tempCost;
                        heap[parent][1] = tempNode;
                        j = parent;
                    } else {
                        break;
                    }
                }
            }
        }
    }

    return totalCost;
}

int main() {
    int T;
    scanf("%d", &T);

    while (T--) {
        int n;
        scanf("%d", &n);

        Point points[MAX_POINTS];
        for (int i = 0; i < n; i++) {
            scanf("%d %d", &points[i].x, &points[i].y);
        }

        int result = minimumCostToConnectPoints(points, n);
        printf("%d\n", result);
    }

    return 0;
}






