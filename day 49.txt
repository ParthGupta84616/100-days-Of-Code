You are given a 0-indexed integer array nums and an integer k.

A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.

Print the length of the longest possible equal subarray after deleting at most k elements from nums.

A subarray is a contiguous, possibly empty sequence of elements within an array.

Input Format

The first line will give T, the number of testcase.
The first line of each testcase will give nums.length and k.
The next line will give array nums.
Constraints

1<=T<=1000
1 <= nums.length <= 10^5
1 <= nums[i] <= nums.length
0 <= k <= nums.length
Output Format

For each testcase Print the length of the longest possible equal subarray after deleting at most k elements from nums.

Sample Input 0

1
6 3
1 3 2 3 1 3
Sample Output 0

3
Explanation 0

It's optimal to delete the elements at index 2 and index 4. After deleting them, nums becomes equal to [1, 3, 3, 3]. The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3. It can be proven that no longer equal subarrays can be created.

Sample Input 1

1
6 2
1 1 2 2 1 1
Sample Output 1

4
Explanation 1

It's optimal to delete the elements at index 2 and index 3. After deleting them, nums becomes equal to [1, 1, 1, 1]. The array itself is an equal subarray, so the answer is 4. It can be proven that no longer equal subarrays can be created.





#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int helper(int mid,int k,vector<int>&nums)
    {
         int i=0,j=0;
          unordered_map<int ,int>check;
        while(j<nums.size()){
            if(check[nums[j]]+1>=mid)return true;
            check[nums[j]]+=1;
            if(j>= k+mid-1){
                check[nums[i]]-=1;
                i+=1;
            }
            j++;
        }
        return false;
    }
    int longestEqualSubarray(vector<int>& nums, int k) 
    {
        int s= 1 ,e = nums.size(),ans=0;
        while(s<=e)
        {
            int mid = (e-s)/2+s;
            if(helper(mid,k,nums))
            {
                ans=mid,s = mid+1;
            }
            else e=mid-1;
        }
        return ans;
    }
};
int main(){
    int t;
    cin>>t;
    vector<int>ans;
    Solution s=Solution();
    while(t--){
        int n,m;
        cin>>n>>m;
        vector<int> aux(n);
        for(int i=0;i<n;i++)cin>>aux[i];
        ans.push_back(s.longestEqualSubarray(aux,m));
    }
    for(auto it:ans){
        cout<<it<<endl;
    }
}


