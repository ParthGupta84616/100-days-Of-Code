You are given an integer array nums and an integer k.

For each index i where 0 <= i < nums.length, change nums[i] to be either nums[i] + k or nums[i] - k.

The score of nums is the difference between the maximum and minimum elements in nums.

Print the minimum score of nums after changing the values at each index.

Input Format

The first line will give T, the number of testcases.
The first line of each testcase will give nums length and k.
The second line will give the array nums.
Constraints

1 <= T <= 1000
1 <= nums.length <= 10^4
0 <= nums[i] <= 10^4
0 <= k <= 10^4
Output Format

For each testcase, print the minimum score of nums after changing the values at each index.

Sample Input 0

1
1 0
1
Sample Output 0

0
Explanation 0

The score is max(nums) - min(nums) = 1 - 1 = 0.

Sample Input 1

1
2 2
0 10
Sample Output 1

6
Explanation 1

Change nums to be [2, 8]. The score is max(nums) - min(nums) = 8 - 2 = 6.

Sample Input 2

1
3 3
1 3 6
Sample Output 2

3
Explanation 2

Change nums to be [4, 6, 3]. The score is max(nums) - min(nums) = 6 - 3 = 3.




#include<bits/stdc++.h>
using namespace std;
class Solution {
public:
    int smallestRangeII(vector<int>& nums, int k) {
        int N = nums.size();
        sort(nums.begin(),nums.end());
        int ans = nums[N-1] - nums[0];

        for (int i = 0; i < nums.size() - 1; ++i) {
            int a = nums[i], b = nums[i+1];
            int high = max(nums[N-1] - k, a + k);
            int low = min(nums[0] + k, b - k);
            ans = min(ans, high - low);
        }
        return ans;
    }
};
int main(){
    int t;
    cin>>t;
    vector<int> ans;
    Solution s=Solution();
    while(t--){
        int n,k;
        cin>>n>>k;
        vector<int> aux(n);
        for(int i=0;i<n;i++)cin>>aux[i];
        ans.push_back(s.smallestRangeII(aux,k));
    }
    for(auto it:ans){
        cout<<it<<endl;
    }
}